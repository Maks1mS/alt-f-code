diff -u exfat-linux-5.8-1arter97/compat.h exfat-linux-20200711/compat.h
--- exfat-linux-5.8-1arter97/compat.h	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/compat.h	2020-07-10 18:51:57.000000000 +0100
@@ -8,6 +8,16 @@
 
 #include <linux/version.h>
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 8, 0)
+#error "This driver doesn't support v5.8+, " \
+       "please use the included driver from your kernel"
+#endif
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 9, 0)
+#error "This driver doesn't support kernel versions lower than v4.9, " \
+       "please use the driver from https://github.com/arter97/exfat-linux/tree/old"
+#endif
+
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 16, 0)
 #include <linux/iversion.h>
 #else
Common subdirectories: exfat-linux-5.8-1arter97/debian and exfat-linux-20200711/debian
diff -u exfat-linux-5.8-1arter97/dir.c exfat-linux-20200711/dir.c
--- exfat-linux-5.8-1arter97/dir.c	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/dir.c	2020-07-10 18:51:57.000000000 +0100
@@ -308,7 +308,7 @@
 	.llseek		= generic_file_llseek,
 	.read		= generic_read_dir,
 	.iterate	= exfat_iterate,
-	.fsync		= generic_file_fsync,
+	.fsync		= exfat_file_fsync,
 };
 
 int exfat_alloc_new_dir(struct inode *inode, struct exfat_chain *clu)
@@ -424,10 +424,12 @@
 	ep->dentry.name.flags = 0x0;
 
 	for (i = 0; i < EXFAT_FILE_NAME_LEN; i++) {
-		ep->dentry.name.unicode_0_14[i] = cpu_to_le16(*uniname);
-		if (*uniname == 0x0)
-			break;
-		uniname++;
+		if (*uniname != 0x0) {
+			ep->dentry.name.unicode_0_14[i] = cpu_to_le16(*uniname);
+			uniname++;
+		} else {
+			ep->dentry.name.unicode_0_14[i] = 0x0;
+		}
 	}
 }
 
@@ -437,7 +439,7 @@
 {
 	struct super_block *sb = inode->i_sb;
 	struct exfat_sb_info *sbi = EXFAT_SB(sb);
-	struct timespec64 ts = current_time(inode);
+	exfat_timespec_t ts = current_time(inode);
 	sector_t sector;
 	struct exfat_dentry *ep;
 	struct buffer_head *bh;
diff -u exfat-linux-5.8-1arter97/exfat_fs.h exfat-linux-20200711/exfat_fs.h
--- exfat-linux-5.8-1arter97/exfat_fs.h	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/exfat_fs.h	2020-07-10 18:51:57.000000000 +0100
@@ -22,6 +22,12 @@
 
 #define EXFAT_CLUSTERS_UNTRACKED (~0u)
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 18, 0)
+typedef struct timespec64 exfat_timespec_t;
+#else
+typedef struct timespec exfat_timespec_t;
+#endif
+
 /*
  * exfat error flags
  */
@@ -190,9 +196,9 @@
 	unsigned short attr;
 	loff_t size;
 	unsigned int num_subdirs;
-	struct timespec64 atime;
-	struct timespec64 mtime;
-	struct timespec64 crtime;
+	exfat_timespec_t atime;
+	exfat_timespec_t mtime;
+	exfat_timespec_t crtime;
 	struct exfat_dentry_namebuf namebuf;
 };
 
@@ -303,7 +309,7 @@
 	struct rw_semaphore truncate_lock;
 	struct inode vfs_inode;
 	/* File creation time */
-	struct timespec64 i_crtime;
+	exfat_timespec_t i_crtime;
 };
 
 static inline struct exfat_sb_info *EXFAT_SB(struct super_block *sb)
@@ -431,6 +437,7 @@
 #else
 int exfat_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat);
 #endif
+int exfat_file_fsync(struct file *file, loff_t start, loff_t end, int datasync);
 
 /* namei.c */
 extern const struct dentry_operations exfat_dentry_ops;
@@ -529,10 +536,10 @@
 #define exfat_info(sb, fmt, ...)					\
 	exfat_msg(sb, KERN_INFO, fmt, ##__VA_ARGS__)
 
-void exfat_get_entry_time(struct exfat_sb_info *sbi, struct timespec64 *ts,
+void exfat_get_entry_time(struct exfat_sb_info *sbi, exfat_timespec_t *ts,
 		u8 tz, __le16 time, __le16 date, u8 time_cs);
-void exfat_truncate_atime(struct timespec64 *ts);
-void exfat_set_entry_time(struct exfat_sb_info *sbi, struct timespec64 *ts,
+void exfat_truncate_atime(exfat_timespec_t *ts);
+void exfat_set_entry_time(struct exfat_sb_info *sbi, exfat_timespec_t *ts,
 		u8 *tz, __le16 *time, __le16 *date, u8 *time_cs);
 u16 exfat_calc_chksum16(void *data, int len, u16 chksum, int type);
 u32 exfat_calc_chksum32(void *data, int len, u32 chksum, int type);
Only in exfat-linux-5.8-1arter97: exfat-linux_2.2.0-3arter97_armv5.ipk
Only in exfat-linux-5.8-1arter97: exfat-linux-armv5.control
Only in exfat-linux-5.8-1arter97: exfat-linux.control
Only in exfat-linux-5.8-1arter97: exfat-linux.control~
diff -u exfat-linux-5.8-1arter97/file.c exfat-linux-20200711/file.c
--- exfat-linux-5.8-1arter97/file.c	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/file.c	2020-07-10 18:51:57.000000000 +0100
@@ -6,6 +6,7 @@
 #include <linux/slab.h>
 #include <linux/cred.h>
 #include <linux/buffer_head.h>
+#include <linux/blkdev.h>
 
 #include "exfat_fs.h"
 
@@ -149,7 +150,7 @@
 
 	/* update the directory entry */
 	if (!evict) {
-		struct timespec64 ts;
+		exfat_timespec_t ts;
 		struct exfat_dentry *ep, *ep2;
 		struct exfat_entry_set_cache *es;
 
@@ -367,12 +368,28 @@
 	return error;
 }
 
+int exfat_file_fsync(struct file *filp, loff_t start, loff_t end, int datasync)
+{
+	struct inode *inode = filp->f_mapping->host;
+	int err;
+
+	err = __generic_file_fsync(filp, start, end, datasync);
+	if (err)
+		return err;
+
+	err = sync_blockdev(inode->i_sb->s_bdev);
+	if (err)
+		return err;
+
+	return blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL, NULL);
+}
+
 const struct file_operations exfat_file_operations = {
 	.llseek		= generic_file_llseek,
 	.read_iter	= generic_file_read_iter,
 	.write_iter	= generic_file_write_iter,
 	.mmap		= generic_file_mmap,
-	.fsync		= generic_file_fsync,
+	.fsync		= exfat_file_fsync,
 	.splice_read	= generic_file_splice_read,
 	.splice_write	= iter_file_splice_write,
 };
Only in exfat-linux-5.8-1arter97: HOWTO-BUILD.sh
Only in exfat-linux-5.8-1arter97: HOWTO-BUILD.sh~
Only in exfat-linux-5.8-1arter97: .inode.o.d
diff -u exfat-linux-5.8-1arter97/misc.c exfat-linux-20200711/misc.c
--- exfat-linux-5.8-1arter97/misc.c	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/misc.c	2020-07-10 18:51:57.000000000 +0100
@@ -64,7 +64,7 @@
 #define SECS_PER_MIN    (60)
 #define TIMEZONE_SEC(x)	((x) * 15 * SECS_PER_MIN)
 
-static void exfat_adjust_tz(struct timespec64 *ts, u8 tz_off)
+static void exfat_adjust_tz(exfat_timespec_t *ts, u8 tz_off)
 {
 	if (tz_off <= 0x3F)
 		ts->tv_sec -= TIMEZONE_SEC(tz_off);
@@ -73,7 +73,7 @@
 }
 
 /* Convert a EXFAT time/date pair to a UNIX date (seconds since 1 1 70). */
-void exfat_get_entry_time(struct exfat_sb_info *sbi, struct timespec64 *ts,
+void exfat_get_entry_time(struct exfat_sb_info *sbi, exfat_timespec_t *ts,
 		u8 tz, __le16 time, __le16 date, u8 time_cs)
 {
 	u16 t = le16_to_cpu(time);
@@ -99,7 +99,7 @@
 }
 
 /* Convert linear UNIX date to a EXFAT time/date pair. */
-void exfat_set_entry_time(struct exfat_sb_info *sbi, struct timespec64 *ts,
+void exfat_set_entry_time(struct exfat_sb_info *sbi, exfat_timespec_t *ts,
 		u8 *tz, __le16 *time, __le16 *date, u8 *time_cs)
 {
 	struct tm tm;
@@ -129,7 +129,7 @@
  * (There is no 10msIncrement field for access_time unlike create/modify_time)
  * atime also has only a 2-second resolution.
  */
-void exfat_truncate_atime(struct timespec64 *ts)
+void exfat_truncate_atime(exfat_timespec_t *ts)
 {
 	ts->tv_sec = round_down(ts->tv_sec, 2);
 	ts->tv_nsec = 0;
diff -u exfat-linux-5.8-1arter97/namei.c exfat-linux-20200711/namei.c
--- exfat-linux-5.8-1arter97/namei.c	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/namei.c	2020-07-10 18:51:57.000000000 +0100
@@ -973,7 +973,6 @@
 		goto unlock;
 	}
 
-	exfat_set_vol_flags(sb, VOL_DIRTY);
 	exfat_chain_set(&clu_to_free, ei->start_clu,
 		EXFAT_B_TO_CLU_ROUND_UP(i_size_read(inode), sbi), ei->flags);
 
@@ -1000,6 +999,7 @@
 	num_entries++;
 	brelse(bh);
 
+	exfat_set_vol_flags(sb, VOL_DIRTY);
 	err = exfat_remove_entries(dir, &cdir, entry, 0, num_entries);
 	if (err) {
 		exfat_err(sb, "failed to exfat_remove_entries : err(%d)", err);
@@ -1075,10 +1075,14 @@
 
 		epold = exfat_get_dentry(sb, p_dir, oldentry + 1, &old_bh,
 			&sector_old);
+		if (!epold)
+			return -EIO;
 		epnew = exfat_get_dentry(sb, p_dir, newentry + 1, &new_bh,
 			&sector_new);
-		if (!epold || !epnew)
+		if (!epnew) {
+			brelse(old_bh);
 			return -EIO;
+		}
 
 		memcpy(epnew, epold, DENTRY_SIZE);
 		exfat_update_bh(sb, new_bh, sync);
@@ -1159,10 +1163,14 @@
 
 	epmov = exfat_get_dentry(sb, p_olddir, oldentry + 1, &mov_bh,
 		&sector_mov);
+	if (!epmov)
+		return -EIO;
 	epnew = exfat_get_dentry(sb, p_newdir, newentry + 1, &new_bh,
 		&sector_new);
-	if (!epmov || !epnew)
+	if (!epnew) {
+		brelse(mov_bh);
 		return -EIO;
+	}
 
 	memcpy(epnew, epmov, DENTRY_SIZE);
 	exfat_update_bh(sb, new_bh, IS_DIRSYNC(inode));
diff -u exfat-linux-5.8-1arter97/nls.c exfat-linux-20200711/nls.c
--- exfat-linux-5.8-1arter97/nls.c	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/nls.c	2020-07-10 18:51:57.000000000 +0100
@@ -518,7 +518,7 @@
 		    exfat_wstrchr(bad_uni_chars, *uniname))
 			lossy |= NLS_NAME_LOSSY;
 
-		upname[i] = exfat_toupper(sb, *uniname);
+		upname[i] = cpu_to_le16(exfat_toupper(sb, *uniname));
 		uniname++;
 	}
 
@@ -610,7 +610,7 @@
 		    exfat_wstrchr(bad_uni_chars, *uniname))
 			lossy |= NLS_NAME_LOSSY;
 
-		upname[unilen] = exfat_toupper(sb, *uniname);
+		upname[unilen] = cpu_to_le16(exfat_toupper(sb, *uniname));
 		uniname++;
 		unilen++;
 	}
diff -u exfat-linux-5.8-1arter97/super.c exfat-linux-20200711/super.c
--- exfat-linux-5.8-1arter97/super.c	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/super.c	2020-07-10 18:51:57.000000000 +0100
@@ -19,6 +19,8 @@
 #include "exfat_fs.h"
 
 static int exfat_init_sb_info(struct super_block *sb);
+static int exfat_parse_options(struct super_block *sb, char *options, int silent,
+			 struct exfat_mount_options *opts);
 
 static char exfat_default_iocharset[] = CONFIG_EXFAT_DEFAULT_IOCHARSET;
 static struct kmem_cache *exfat_inode_cachep;
@@ -182,6 +184,22 @@
 	kmem_cache_free(exfat_inode_cachep, EXFAT_I(inode));
 }
 
+static int exfat_remount(struct super_block *sb, int *flags, char *opt)
+{
+	int ret = 0;
+
+	*flags |= SB_NODIRATIME;
+
+	/* volume flag will be updated in exfat_sync_fs */
+	sync_filesystem(sb);
+
+	ret = exfat_parse_options(sb, opt, 0, &EXFAT_SB(sb)->options);
+	if (ret)
+		exfat_err(sb, "failed to parse options");
+
+	return ret;
+}
+
 static const struct super_operations exfat_sops = {
 	.alloc_inode	= exfat_alloc_inode,
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 2, 0)
@@ -195,6 +213,7 @@
 	.sync_fs	= exfat_sync_fs,
 	.statfs		= exfat_statfs,
 	.show_options	= exfat_show_options,
+	.remount_fs	= exfat_remount,
 };
 
 enum {
@@ -348,6 +367,17 @@
 		}
 	}
 
+	if (opts->allow_utime == (unsigned short)-1)
+		opts->allow_utime = ~opts->fs_dmask & 0022;
+
+	if (opts->discard) {
+		struct request_queue *q = bdev_get_queue(sb->s_bdev);
+
+		if (!blk_queue_discard(q)) {
+			exfat_warn(sb, "mounting with \"discard\" option, but the device does not support discard");
+			opts->discard = 0;
+		}
+	}
 out:
 	return 0;
 }
@@ -646,18 +676,6 @@
 	sbi = sb->s_fs_info;
 	opts = &sbi->options;
 
-	if (opts->allow_utime == (unsigned short)-1)
-		opts->allow_utime = ~opts->fs_dmask & 0022;
-
-	if (opts->discard) {
-		struct request_queue *q = bdev_get_queue(sb->s_bdev);
-
-		if (!blk_queue_discard(q)) {
-			exfat_warn(sb, "mounting with \"discard\" option, but the device does not support discard");
-			opts->discard = 0;
-		}
-	}
-
 	sb->s_flags |= SB_NODIRATIME;
 	sb->s_magic = EXFAT_SUPER_MAGIC;
 	sb->s_op = &exfat_sops;
Only in exfat-linux-5.8-1arter97: tmp
Only in exfat-linux-5.8-1arter97: .tmp_versions
diff -u exfat-linux-5.8-1arter97/version.h exfat-linux-20200711/version.h
--- exfat-linux-5.8-1arter97/version.h	2020-06-27 00:39:00.000000000 +0100
+++ exfat-linux-20200711/version.h	2020-07-10 18:51:57.000000000 +0100
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0-or-later
 
 #define EXFAT_BASE_VERSION	"5.8"
-#define EXFAT_EXTRAVERSION	"1"
+#define EXFAT_EXTRAVERSION	"2"
 #define EXFAT_VARIANT		"arter97"
 #define EXFAT_VERSION		EXFAT_BASE_VERSION "-" EXFAT_EXTRAVERSION EXFAT_VARIANT
