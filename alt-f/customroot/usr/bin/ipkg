#!/bin/sh

CONFF=/etc/ipkg.conf

IPKG_DIR="/usr/lib/ipkg"
IPKG_ST="$IPKG_DIR/status"

UBIROOT="/rootmnt/ubiimage"
UBI_ST="$UBIROOT/$IPKG_ST"

usage() {
	echo "This is a frontend to ipkg. Use it always!
Usage:
	ipkg -install [<mount_point>]
	ipkg -clean [root (default) | flash]
	ipkg -repair [status file]
	ipkg -update
	ipkg -help
	ipkg standard ipkg command"
	if ! test -f //usr/bin/ipkg-cl; then
		echo -e "\nipkg is not installed, install using the webUI."
	fi
	exit 1
}

msg() {
	echo $1
	clean
	exit 1
}

# root | flash
clean() {
	if test "$1" = "root" && ! aufs.sh -s >& /dev/null; then
		return 0
	fi

	aufs.sh -n
	if test -x /usr/bin/ipkg-cl; then
		for i in $(ipkg-cl -V0 list_installed | cut -f1 -d" "); do
			inst_at=""
			if grep -q "^Package:[[:space:]]*$i" $UBI_ST >& /dev/null; then
				inst_at="flash"
			elif grep -q "^Package:[[:space:]]*$i" $IPKG_ST; then
				inst_at="root"
			fi
			if test "$inst_at" != "$1"; then continue; fi
		
			if test "$i" != "ipkg"; then
				ipkg-cl -force-depends remove $i # >& /dev/null
			fi
		done
		# FIXME: can't remove, flash has packages. change ipkg pkg install
		ipkg-cl remove ipkg # >& /dev/null
	fi
	
	if test "$1" = "flash"; then
		aufs.sh -r
		return 0
	fi

	if ! aufs.sh -u >& /dev/null; then 
		echo "ipkg: can't umount aufs branch, stopping services and retrying..."
		rcall stop >& /dev/null
		# check during 10 seconds that they are indeed stopped
		# "rcall status" doesn't work cause of inetd, syslog and sysctrl 
		cnt=10; st=1
		while test "$st" = "1" -a "$cnt" != "0"; do
			st=0
			for i in $(ls -r /etc/init.d/S*) ;do
				bn=$(basename $i)
				nm=${bn:3}
				if test "$nm" = "inetd" -o "$nm" = "sysctrl" -o "$nm" = "syslog"; then continue; fi
				if rc$nm status >& /dev/null; then st=1; resilient=$nm; fi
			done
			usleep 200000
			cnt=$((cnt-1))
		done

		if test "$st" = 1; then
			echo "ipkg: at least service \"$resilient\" couldn'd be stopped"
		fi

		if ! aufs.sh -u >& /dev/null; then # no hope
			echo "ipkg: can't umount aufs branch, exiting."
			aufs.sh -r
			#rcall start >& /dev/null
			exit 1
		fi
		#rcall start >& /dev/null
	fi
	
	rm -rf $(readlink -f /Alt-F) /Alt-F
}

download_extract() {
	echo "Downloading and extracting ipkg"
	
	TMPD=$(mktemp -d -t)

	if test -e /tmp/ipkg_*_arm.ipk; then
		IPKG=$(basename /tmp/ipkg_*_arm.ipk)
		mv /tmp/$IPKG $TMPD
		local="yes"
	else
		while read type name feed; do
			if test "$type" != "src" -o -z "$feed"; then continue; fi
			host=$(echo $feed | sed -n 's|.*://\([^/]*\).*|\1|p')
			echo -n "Trying $host... "
			if ! nslookup $host >& /dev/null; then
				echo "fail, no such host."
				continue
			fi
			if ! wget -q $feed/Packages -P $TMPD; then
				echo "fail, no Packages file."
				continue
			fi
			if ! grep -q 'Package:[[:space:]]*ipkg' $TMPD/Packages; then
				rm $TMPD/Packages
				echo "fail, not a ipkg file."
				continue
			fi
			version=$(sed -n '/Package:[[:space:]]*ipkg/,/Package:/s/Version:[[:space:]]*\(.*\)/\1/p}' $TMPD/Packages)
			if ! wget -q -P $TMPD $feed/ipkg_${version}_arm.ipk; then
				rm $TMPD/Packages
				echo "fail, no ipkg_${version}_arm.ipk file."
				continue
			fi
			IPKG=ipkg_${version}_arm.ipk
			break
		done < $CONFF
	fi

	if ! test -e $TMPD/ipkg_*_arm.ipk; then
		rm -rf $TMPD
		msg "You don't seem to have enabled feeds,
a name server configured,
or a working internet connection,
and no /tmp/ipkg_*_arm.ipk file found. Exiting"
	fi

	cd $TMPD
	ar x $IPKG
	tar xzf control.tar.gz
	awk '/^Package:/ {
			if( $2 != "ipkg") exit 1 }
		/^Architecture:/ {
			if ($2 != "arm") exit 1 }
		' control
		
	if test $? != 0; then
		rm -rf $TMPD
		msg "Downloaded wrong package?"
	fi
	
	aufs.sh -n
	tar -C /Alt-F -xzf data.tar.gz
	aufs.sh -r

	cd /
	rm -rf $TMPD
}

install() {
	echo Installing ipkg

#	DESTD=$(awk '/^dest.*Alt-F/{print $3}' $CONFF)
#
#	if test "$DESTD" != "/Alt-F"; then
#		msg "Package destination directory must be /Alt-F"
#	fi

#	if ! test -d "$DESTD"; then
	if ! test -d "/Alt-F"; then
		msg "Package destination directory /Alt-F not found."
	fi

	if ! test -x /usr/bin/ipkg-cl; then
		download_extract
	fi
	
	aufs.sh -n
	mkdir -p /Alt-F/etc/init.d /Alt-F/usr/bin /Alt-F/usr/share/ipkg /Alt-F/usr/lib/ipkg/info
	
	#mkdir -p $IPKG_DIR
	if test -s /etc/preinst.status; then
		cat /etc/preinst.status >> /Alt-F/$IPKG_ST
	fi
	aufs.sh -r
	
	# "FIXME: remount /Alt-F with inotify bellow makes 3.10.32/3.18.21 crash, the *first* time"
	#mkdir -p $IPKG_DIR # this seems to solve the issue. Is it warming-up aufs?
	if test -z "$local"; then
		aufs.sh -n
		ipkg-cl update
#		ipkg-cl install ipkg
		aufs.sh -r
	fi

#	if test -s /etc/preinst.status; then
#		cat /etc/preinst.status >> $IPKG_ST
#	fi

	cat /etc/Alt-F > $IPKG_DIR/.fixed

	exit 0
}

# remove duplicate pkgs, keeping the higher version one
repair() {
	awk '
	/Package:/ { nm = $2; inst=""; pri=""; dep=""; es=""; cff=""; } # Package is first entry
	/Conffiles:/ {
		while (getline) { # getline to $0 means that following rules will be run
			if (length($0) == 0 || index($0, "./") != 1)
				break
			cff = cff "\n" $0
		}
	}
	/Version:/ { ver = $2 }
	/Depends:/ { dep = substr($0, index($0, ":") + 2) }
	/Architecture:/ { arc = $2 }
	/Priority:/ { pri = $2 }
	/Essential:/ { es = $2 }
	/Installed-Time:/ { inst = $2 }
	/Status:/ { st = substr($0, index($0, ":") + 2) }
	/^$/ {
		if (nm in pkg) {
			if (system("ipkg-cl -V0 compare_versions " ver " \"<<\" " pkg[nm]) == 1)
				next
		}

		pkg[nm] = ver
		stat[nm] = st
		arch[nm] = arc
		deps[nm] = dep
		prior[nm] = pri
		ess[nm] = es
		instt[nm] = inst
		conf[nm] = cff
	}
	END {
		for (i in pkg) {
			printf("Package: %s\n", i)
			printf("Version: %s\n", pkg[i])
			if (length(deps[i]))
				printf("Depends: %s\n", deps[i])
			if (length(ess[i]))
				printf("Essential: %s\n", ess[i])
			printf("Architecture: %s\n", arch[i])
			if (length(prior[i]))
				printf("Priority: %s\n", prior[i])
			printf("Status: %s\n", stat[i])
			if (length(instt[i]))
				printf("Installed-Time: %s\n", instt[i])
			if (length(conf[i]))
				printf("Conffiles:%s\n", conf[i])
			printf("\n");
		}
	}' $1 > /tmp/po
	# sort by pkg name
	for i in $(grep Package: /tmp/po | sort -u | cut -f2 -d" "); do
		sed -n "/Package: $i$/,/^$/p" /tmp/po
	done > $IPK_ST
	rm /tmp/po
}

# remove installed packages of same or lower version than a existing pre-installed package.
# remove even if at the same version, as an on-disk version might have been installed
# (an upgraded version was released and installed and it is now available pre-installed)
ipkg_upgrade() {

	echo "ipkg: Firmware upgrade detected, fixing installed/pre-installed packages:"

	to_rm=""
	to_save=""

	while read pkg pver; do
		iver=$(awk '/Package:[[:space:]]*'$pkg'$/{getline; printf $2; exit 0}' $IPKG_ST)
		echo $pkg:$pver:$iver:
		if test -n "$iver" -a -n "$pver"; then
			# return value from ipkg compare version is reversed,
			# and operator < equal to <=, > equal >=, use >>, <<

			uninst=""
			if ! ipkg-cl -V0 compare_versions "$pver" ">>" "$iver"; then
				echo uninstall $pkg $iver, $pver is pre-installed
				to_rm="$to_rm $pkg"
				uninst=y
			fi

			# on-disk pkg updated
			if ! ipkg-cl -V0 compare_versions "$pver" "=" "$iver"; then
				if test -f $IPKG_DIR/info/$pkg.list; then
					echo uninstall $pkg $iver, $iver is on-disk
					to_rm="$to_rm $pkg"
					uninst=y
				fi
			fi

			if test -n "$uninst" -a -f $IPKG_DIR/info/$pkg.conffiles; then
				to_save="$to_save $(cat $IPKG_DIR/info/$pkg.conffiles)"
			fi
		fi
	done < /etc/preinst

	#remove previous preinstalled packages that are not present anymore
	for i in $(ipkg -V0 status | awk '/Package/{print $2}'); do
		if ! test -f $IPKG_DIR/info/$i.control; then
			if ! grep -q $i /etc/preinst; then
				to_rm="$to_rm  $i"
			fi
		fi
	done

	# when removing, rc<service> links are removed, hot_aux recreates some
	if test -n "$to_rm"; then
		# backup conf files
		for i in $to_save; do cp /$i /$i.bck; done
		aufs.sh -n
		# dooh! looks like lists are being rebuild each time and it will eventually work
		ipkg-cl -force-depends remove $to_rm $to_rm $to_rm
		aufs.sh -r
		# restore conf-files 
		for i in $to_save; do mv /$i.bck /$i; done
	fi

	if test -s /etc/preinst.status; then
		cat /etc/preinst.status >> $IPKG_ST
	fi
}

# fix dest

# if echo $board | grep -qE "DNR-322L|DNS-320|DNS-325|DNS-327L"; then
# 	if mount | grep -q $SQROOT; then
# 		cat /etc/preinst-sq >> /etc/preinst
# 		cat /etc/preinst-sq.status >> /etc/preinst.status
# 		cat /etc/preinst-sq.status >> $IPKG_ST
# 	elif ! mount | grep -q $UBIROOT; then
# 		echo "<li>UBI failed, minimum system loaded.</li>" >> $SERRORL
# 	fi
# fi

if ! test -f $IPKG_ST || cmp -s $UBI_ST $IPKG_ST; then
	mkdir -p $IPKG_DIR
	cat /etc/preinst.status >> $IPKG_ST
fi

# replace old /Alt-F dest with 'root'
if grep -q '^dest /Alt-F' $CONFF; then
	sed -i "s|dest /Alt-F.*$|dest root /|" $CONFF 
fi

# adjust ipkg packages destination, depending on UBI
if mount -t ubifs | grep -qw $UBIROOT; then
	if ! grep -q '^dest flash' $CONFF; then
		sed -i "/dest root/a dest flash $UBIROOT" $CONFF
	fi
elif grep -q "^dest flash"  $CONFF; then
	sed -i '/^dest flash/d' $CONFF
fi

# adjust architecture
arch=$(uname -m); arch=${arch:0:5}
if ! grep -q '^arch' $CONFF; then
	echo "arch arm 100" >> $CONFF
fi
if ! grep -q "^arch $arch" $CONFF; then
	echo "arch $arch 200" >> $CONFF
fi

if test "$1" = "-clean"; then
	if test $# = "1"; then
		dest_loc="root"
	elif test "$2" = "flash"; then
		dest_loc="flash"
	elif test "$2" = "root"; then
		dest_loc="root"
	else
		usage
	fi
	clean "$dest_loc"

elif test "$1" = "-install"; then
	
	if aufs.sh -s; then
		if test $# != 1; then
			echo "Alt-F already exists, you shouldn't supply a mountpoint."
			exit 1
		else
			install
		fi
	else
		if test $# != 2; then
			echo "/Alt-F does not exists or is not an aufs branch."
			echo "you must supply a mountpoint where to install ipkg."
			exit 1
		elif ! mountpoint -q "$2"; then
			echo "\"$2\" is not a mountpoint."
			exit 1
		else
			aufs.sh -i "$2" && install
			exit $?
		fi
	fi
	
elif test "$1" = "-update"; then
	# this only needs to be done once for a new firmware upgrade
	if test "$(cat $IPKG_DIR/.fixed 2> /dev/null)" != $(cat /etc/Alt-F) ; then
		ipkg_upgrade
		cat /etc/Alt-F > $IPKG_DIR/.fixed
	fi

elif test "$1" = "-repair"; then
	rpd=$IPKG_ST
	if test "$2"; then
		rpd="$2"
	fi
	repair $rpd
	
elif test "$1" = "-help"; then
	usage

# normal ipkg command
elif test -f /usr/bin/ipkg-cl; then # && readlink -f /Alt-F >& /dev/null; then
	
	# removing a package if it is preinstalled requires ressurrecting/reinstalling it
	if echo $* | grep -qw 'remove'; then
		pkg=$(eval echo \$$#)   # assume pkg is last command argument
		# some packages have a rcscript, remake it if it exists
		if test -f $IPKG_DIR/info/$pkg.list && grep -q /etc/init.d/S.* $IPKG_DIR/info/$pkg.list; then
			rclink=$(grep -ho '/sbin/rc.*' $IPKG_DIR/info/$pkg.postrm 2> /dev/null)
		fi
	fi

	aufs.sh -n
	ipkg-cl $*
	ret=$?
	aufs.sh -r

	if test -n "$pkg" -a -f /etc/preinst.status && grep -q "Package:[[:space:]]*$pkg$" /etc/preinst.status; then
		if test -n "$rclink"; then
			ln -sf /usr/sbin/rcscript $rclink
		fi
		sed -n "/Package: $pkg/,/^$/p" /etc/preinst.status >> $IPKG_ST
	fi      

	exit $ret

else
	usage
fi
