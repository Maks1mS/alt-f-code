#######################################################################
##
##  SSL Support
## ------------- 
##
## To enable SSL for the whole server you have to provide a valid
## certificate and have to enable the SSL engine.::
##
##   ssl.engine = "enable"
##   ssl.pemfile = "/path/to/server.pem"
##
##   $SERVER["socket"] == "10.0.0.1:443" {
##     ssl.engine                  = "enable"
##     ssl.pemfile                 = "/etc/ssl/private/www.example.com.pem"
##
##     # Check your cipher list with: openssl ciphers -v '...'
##     # (use single quotes as your shell won't like ! in double quotes)
##     #ssl.cipher-list             = "HIGH"   # default
##
##     # (recommended to accept only TLSv1.2 and TLSv1.3)
##     #ssl.openssl.ssl-conf-cmd = ("Protocol" => "-ALL, TLSv1.2, TLSv1.3")
##
##     server.name                 = "www.example.com"
##
##     server.document-root        = "/srv/www/vhosts/example.com/www/"
##   }
##

## If you have a .crt and a .key file, cat them together into a
## single PEM file:
## $ cat /etc/ssl/private/lighttpd.key /etc/ssl/certs/lighttpd.crt \
##   > /etc/ssl/private/lighttpd.pem
##
#ssl.pemfile = "/etc/ssl/private/lighttpd.pem"
#
# or
#
#ssl.privkey = "/etc/ssl/private/privkey.pem"
#ssl.pemfile = "/etc/ssl/private/cert.pem"

##
## optionally pass the CA certificate here.
##
##
#ssl.ca-file = ""

##
## and the CRL revocation list here.
##
##
#ssl.ca-crl-file = ""

server.modules += ("mod_openssl")

# redirect http to https, including ports. Needs loading mod_redirect in modules.conf.
# Not simple nor elegant!
$HTTP["scheme"] == var.redir {
	$SERVER["socket"] == ":" + var.http_port {
		$HTTP["host"] =~ "([^:]+):" + var.http_port {
			url.redirect = ("" => "https://%1:" + var.https_port + "${url.path}${qsa}")
		} else {
			url.redirect = ("" => "https://${url.authority}${url.path}${qsa}")
		}
	}
}

$SERVER["socket"] == ":" + var.https_port {
	ssl.engine = "enable"
	ssl.acme-tls-1 = var.alpn_dir
	ssl.dh-file = "/etc/ssl/dhparam.pem"
	
	ssl.openssl.ssl-conf-cmd = ("MinProtocol" => "TLSv1.2")
	
	ssl.openssl.ssl-conf-cmd += ("Options" => "+ServerPreference,PrioritizeChaCha,-SessionTicket")

	ssl.openssl.ssl-conf-cmd += ("Curves" => "X25519:P-256:X448:P-521:P-384")
	
	ssl.openssl.ssl-conf-cmd += ("Ciphersuites" => "TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384")

	ssl.openssl.ssl-conf-cmd += ("CipherString" => "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384")
 
	# default cert for internal hosts
	ssl.pemfile = "/etc/ssl/certs/lighttpd.pem"

	# sending the righ certificate based on host name, relies on SNI capable browser
	$HTTP["host"] =~ "(^|www\.)" + var.ext_domain {
		ssl.privkey = "/etc/ssl/certs/" + var.ext_domain + ".key"
		ssl.pemfile = "/etc/ssl/certs/" + var.ext_domain + ".crt"
		ssl.ca-file = "/etc/ssl/certs/" + var.ext_domain + "-ca.crt"
	}
}
